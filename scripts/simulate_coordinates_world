#!/usr/bin/env python3

#import the rospy package and the String message type
import rospy
from std_msgs.msg import String



demo_coordinates = [
    "[88.3618088,  -103.051071,  101.322342,  -87.7924,  5.59045029,  -2.81264663]",    
    # "[0.7078838,  -90.1117859,  90.1368179,  0.465518475,  90.5599060,  -0.439839125]",    
    # "[54.5582390,  -88.8632584,  85.8678,  -50.8138504,  75.1457214,  -4.15372562]",    
    # "[30.0376320,  -99.7417297,  135.647110,  -75.3280411,  35.5270500,  23.6884060]",    
    # "[36.6157303,  -96.6715698,  52.1718979,  -38.6913605,  93.3302078,  -45.0719490]",    
    # "[-0.722357035,  -111.312195,  110.423820,  -4.57662725,  90.9246521,  10.3348379]"
]    

demo_coordinates_world = [
    "[88.3618088,  -103.051071,  101.322342,  -87.7924,  5.59045029,  -2.81264663]",    
    "[0.7078838,  -90.1117859,  90.1368179,  0.465518475,  90.5599060,  -0.439839125]",    
    "[54.5582390,  -88.8632584,  85.8678,  -50.8138504,  75.1457214,  -4.15372562]",    
    "[30.0376320,  -99.7417297,  135.647110,  -75.3280411,  35.5270500,  23.6884060]",    
    "[36.6157303,  -96.6715698,  52.1718979,  -38.6913605,  93.3302078,  -45.0719490]",    
    "[-0.722357035,  -111.312195,  110.423820,  -4.57662725,  90.9246521,  10.3348379]"
]    





#function to publish messages at the rate of 1 messages per 8 seconds
def messagePub():
    
    #define a topic to which the messages will be published
    coordinate_publisher = rospy.Publisher("worldCoordinates", String, queue_size=10)
    
    #initialize the Publisher node. 
    rospy.init_node("world_coordinates_sim_node")
    
    #publishes at a rate of 1 messages every 8 seconds
    interval = 1/8
    rate = rospy.Rate(interval)
    
    #Keep publishing the messages until the user interrupts 
    while not rospy.is_shutdown():
        counter = 0
        for i in demo_coordinates:
            if counter < len(demo_coordinates):
                coordinates = i
                #display the coordinates on the terminal
                rospy.loginfo(f"Published[{counter}]: {coordinates}")
                
                #publish the coordinates to the topic
                coordinate_publisher.publish(coordinates)
                
                #rate.sleep() will wait enough until the node publishes the     message to the topic
                rate.sleep()
                
                # increment the counter
                counter += 1
            else:
                break
        
        
        

if __name__ == "__main__":
    try:
        messagePub()
    #capture the Interrupt signals
    except rospy.ROSInterruptException:
        pass